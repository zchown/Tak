Build profile: -w ghc-9.2.8 -O1
In order, the following will be built (use -v for more details):
 - Tak-0.1.0.0 (lib) (file lib/MutableState.hs changed)
 - Tak-0.1.0.0 (test:Tak-test) (dependency rebuilt)
Preprocessing library for Tak-0.1.0.0..
Building library for Tak-0.1.0.0..
[7 of 7] Compiling MutableState     ( lib/MutableState.hs, /Users/zanderchown/ComputerScience/Tak/dist-newstyle/build/aarch64-osx/ghc-9.2.8/Tak-0.1.0.0/build/MutableState.o, /Users/zanderchown/ComputerScience/Tak/dist-newstyle/build/aarch64-osx/ghc-9.2.8/Tak-0.1.0.0/build/MutableState.dyn_o )
Preprocessing test suite 'Tak-test' for Tak-0.1.0.0..
Building test suite 'Tak-test' for Tak-0.1.0.0..
Linking /Users/zanderchown/ComputerScience/Tak/dist-newstyle/build/aarch64-osx/ghc-9.2.8/Tak-0.1.0.0/t/Tak-test/build/Tak-test/Tak-test ...
Loading environment variables...
Configuring tests...
Running enabled tests...
Running board tests ...

Board Module
  createEmptyBoard
    creates a 4x4 board [✔]
  getTopPiece
    returns Nothing for an empty square [✔]
    returns the top piece of a non-empty stack [✔]
  addToStack
    adds a piece to an empty stack [✔]
    prevents adding to a non-flat top piece [✔]
  getAllPieces
    returns all pieces of a specific color [✔]
  getPlaced
    correctly counts placed pieces [✔]
  letterToCol and colToLetter
    converts between letters and column numbers [✔]
  checkGameResult
    detects non full board [✔]
    detects full board [✔]
    detects when game is not over [✔]
    check f1 bug? [✔]
  findRoad
    detects a white road through mixed paths [✔]
    off by 1 bug? [✔]
    detects a black road through mixed paths [✔]
    prevents road through standing stones [✔]
  detects road win [✔]
  uses cap for road [✔]
  detects reserve game end [✔]
  detects flat win [✔]

Finished in 0.0027 seconds
20 examples, 0 failures
Running TPS tests...

TPS Parsing
  parses an empty 4x4 starting board correctly [✔]
  parses a 5x5 starting board correctly [✔]
  removes TPS brackets and cleans input correctly [✔]
  parses turn and move number correctly [✔]
  parses easy board [✔]
  handles invalid TPS format (missing move number) [✔]
  handles invalid TPS format (extra component) [✔]
  handles invalid move number (non-numeric) [✔]
  handles invalid piece (invalid character) [✔]
  handles invalid piece (invalid character) [✔]
  handles invalid board size (inconsistent rows) [✔]
  handles invalid square format (invalid square) [✔]
  handles empty input [✔]
Board to TPS Conversion
  converts an empty 4x4 board to TPS correctly [✔]
  converts a 6x6 board with pieces to TPS correctly [✔]
  converts a 6x6 board with pieces to TPS correctly [✔]

Finished in 0.0018 seconds
16 examples, 0 failures
Running PTN tests...

PTN Parsing
  parseSingleMove
    parses a flat placement for White [✔]
    parses a standing placement for White [✔]
    parses a capstone placement for White [✔]
    parses a basic slide move for White [✔]
    parses a slide move with multiple drops for White [✔]
    fails to parse an invalid move format [✔]
  parseMovePair
    parses a move pair with White and Black moves [✔]
    parses a move pair with only White's move (partial move) [✔]
    fails to parse a move pair with an invalid format [✔]
    fails to parse a move pair with an invalid White move [✔]
    fails to parse a move pair with an invalid Black move [✔]
  parsePTN
    parses a full PTN string with metadata and moves [✔]
    parses a PTN string with a partial move (only White's move) [✔]
    parses a PTN string with missing metadata [✔]
    fails to parse a PTN string with invalid moves [✔]

Finished in 0.0016 seconds
15 examples, 0 failures
Running move tests...

Move Validation
  should allow placing a flat stone on an empty square [✔]
  should reject placing a flat stone on an occupied square [✔]
  should allow sliding a stack within the board boundaries [✔]
  should reject sliding a stack off the board [✔]
  should reject slide when a capstone is in the way [✔]
  should reject slide when a standing piece is in the way [✔]
  basic capstone slide [✔]
  capstone with crush [✔]
  capstone crush set incorrectly [✔]
  should reject slide with invalid drop counts [✔]
  should reject slide with insufficient pieces in stack [✔]
Making Moves
  should place a flat stone on the board [✔]
  should slide a stack to an adjacent square [✔]
  should handle complex slides with multiple drops [✔]
  reject slides that would exceed board boundaries with multiple drops [✔]
  should handle slides with standing stones in the path [✔]
  should allow slides that crush standing stones with a capstone [✔]
  should not allow crush with flat and cap stone [✔]
Undo Moves
  should undo a flat stone placement [✔]
  should undo a standing stone placement [✔]
  should undo a capstone placement [✔]
  should undo a slide move [✔]
  should reject undoing a slide with invalid drop counts [✔]
  should reject undoing a slide with invalid drop counts [✔]
  should reject undoing a slide move with impossible drops [✔]
  should reject undoing a slide with beyond limit drops [✔]
  should reject undoing a slide with insufficient pieces [✔]
  correctly undo more complex slide move [✔]
  correctly undo more complex slide move [✔]
  correctly undo more complex slide move [✔]
  undo crush [✔]
Move Generation
  should generate all valid first moves [✔]
  should generate all valid placement moves for a player [✔]
  should generate all valid slide moves for a player [✔]
  should generate valid slides for a stack of stones [✔]
  should generate valid slides with crushing for a capstone [✔]
  generates all possible moves in complex TPS position [✔]
  generates all possible moves in complex TPS position [✔]
Edge Cases
  should reject placing a stone outside the board boundaries [✔]
  should reject sliding a stack outside the board boundaries [✔]
  should reject sliding a stack with invalid drop counts [✔]
  should reject sliding a stack with insufficient pieces [✔]
  should reject sliding a stack with a standing stone in the way [✔]
  should reject sliding a stack with a capstone in the way [✔]
  should reject sliding a stack with incorrect crush setting [✔]
Complex TPS Positions
  should handle a complex TPS position with multiple stacks [✔]
  should handle a TPS position with a capstone and standing stones [✔]
  should reject a slide in a TPS position with a standing stone in the way [✔]
  should handle a TPS position with a complex slide and multiple drops [✔]
  should reject a slide in a TPS position with insufficient pieces [✔]

Finished in 0.0044 seconds
50 examples, 0 failures
Running mutable state tests...

convert back and forth with regular board
Created mutable board
  should create a new board [✔]
  should be able to swap more complex board [✔]
correctly reads squares
  converts from pos to index [✔]
  converts from index to pos [✔]
  reads squares [✔]
writing squares
  writes to an empty square [✔]
  overwrites an existing square [✔]
making moves
  places a flat stone on an empty square [✔]
undoing moves
  undoes a flat stone placement [✔]
  undoes a slide move [✔]
move generation
  generates all valid first moves [✔]
game end conditions
Valid neighbors: [Position (1,2)]
Dir: Vertical
Valid neighbors: [Position (1,3)]
Dir: Vertical
Valid neighbors: [Position (1,4)]
Dir: Vertical
Valid neighbors: [Position (1,5)]
Dir: Vertical
Valid neighbors: [Position (1,6)]
Dir: Vertical
Found road win
Valid neighbors: [Position (1,2)]
Dir: Horizontal
Valid neighbors: [Position (1,3)]
Dir: Horizontal
Valid neighbors: [Position (1,4)]
Dir: Horizontal
Valid neighbors: [Position (1,5)]
Dir: Horizontal
Valid neighbors: [Position (1,6)]
Dir: Horizontal
Valid neighbors: []
Dir: Horizontal
Valid neighbors: [Position (1,3),Position (1,1)]
Dir: Horizontal
Valid neighbors: [Position (1,4)]
Dir: Horizontal
Valid neighbors: [Position (1,5)]
Dir: Horizontal
Valid neighbors: [Position (1,6)]
Dir: Horizontal
Valid neighbors: []
Dir: Horizontal
Valid neighbors: []
Dir: Horizontal
Valid neighbors: [Position (1,4),Position (1,2)]
Dir: Horizontal
Valid neighbors: [Position (1,5)]
Dir: Horizontal
Valid neighbors: [Position (1,6)]
Dir: Horizontal
Valid neighbors: []
Dir: Horizontal
Valid neighbors: [Position (1,1)]
Dir: Horizontal
Valid neighbors: []
Dir: Horizontal
Valid neighbors: [Position (1,5),Position (1,3)]
Dir: Horizontal
Valid neighbors: [Position (1,6)]
Dir: Horizontal
Valid neighbors: []
Dir: Horizontal
Valid neighbors: [Position (1,2)]
Dir: Horizontal
Valid neighbors: [Position (1,1)]
Dir: Horizontal
Valid neighbors: []
Dir: Horizontal
Valid neighbors: [Position (1,6),Position (1,4)]
Dir: Horizontal
Valid neighbors: []
Dir: Horizontal
Valid neighbors: [Position (1,3)]
Dir: Horizontal
Valid neighbors: [Position (1,2)]
Dir: Horizontal
Valid neighbors: [Position (1,1)]
Dir: Horizontal
Valid neighbors: []
Dir: Horizontal
Valid neighbors: [Position (1,5)]
Dir: Horizontal
Valid neighbors: [Position (1,4)]
Dir: Horizontal
Valid neighbors: [Position (1,3)]
Dir: Horizontal
Valid neighbors: [Position (1,2)]
Dir: Horizontal
Valid neighbors: [Position (1,1)]
Dir: Horizontal
Valid neighbors: []
Dir: Horizontal
  detects a road win for White [✔]
Valid neighbors: [Position (2,1)]
Dir: Vertical
Valid neighbors: [Position (3,1)]
Dir: Vertical
Valid neighbors: [Position (4,1)]
Dir: Vertical
Valid neighbors: [Position (5,1)]
Dir: Vertical
Valid neighbors: [Position (6,1)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (3,1),Position (1,1)]
Dir: Vertical
Valid neighbors: [Position (4,1)]
Dir: Vertical
Valid neighbors: [Position (5,1)]
Dir: Vertical
Valid neighbors: [Position (6,1)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (4,1),Position (2,1)]
Dir: Vertical
Valid neighbors: [Position (5,1)]
Dir: Vertical
Valid neighbors: [Position (6,1)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (1,1)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (5,1),Position (3,1)]
Dir: Vertical
Valid neighbors: [Position (6,1)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (2,1)]
Dir: Vertical
Valid neighbors: [Position (1,1)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (6,1),Position (4,1)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (3,1)]
Dir: Vertical
Valid neighbors: [Position (2,1)]
Dir: Vertical
Valid neighbors: [Position (1,1)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (5,1)]
Dir: Vertical
Valid neighbors: [Position (4,1)]
Dir: Vertical
Valid neighbors: [Position (3,1)]
Dir: Vertical
Valid neighbors: [Position (2,1)]
Dir: Vertical
Valid neighbors: [Position (1,1)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (2,1)]
Dir: Horizontal
Valid neighbors: [Position (3,1)]
Dir: Horizontal
Valid neighbors: [Position (4,1)]
Dir: Horizontal
Valid neighbors: [Position (5,1)]
Dir: Horizontal
Valid neighbors: [Position (6,1)]
Dir: Horizontal
Found road win
  detects a road win for Black [✔]
  detects a flat win for White [✘]
  detects a flat win for Black [✘]
  detects a draw due to reserves [✘]
Valid neighbors: [Position (3,2)]
Dir: Vertical
Valid neighbors: [Position (3,3)]
Dir: Vertical
Valid neighbors: [Position (3,4),Position (4,3)]
Dir: Vertical
Valid neighbors: [Position (3,5),Position (4,4)]
Dir: Vertical
Valid neighbors: [Position (3,6)]
Dir: Vertical
Found road win
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (4,2),Position (5,1)]
Dir: Vertical
Valid neighbors: [Position (5,2)]
Dir: Vertical
Valid neighbors: [Position (5,3)]
Dir: Vertical
Valid neighbors: [Position (5,4)]
Dir: Vertical
Valid neighbors: [Position (5,5)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (5,2),Position (4,1)]
Dir: Vertical
Valid neighbors: [Position (5,3),Position (4,2)]
Dir: Vertical
Valid neighbors: [Position (5,4)]
Dir: Vertical
Valid neighbors: [Position (5,5)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: []
Dir: Horizontal
  detects a road win with a capstone [✔]
Valid neighbors: [Position (4,1)]
Dir: Vertical
Valid neighbors: [Position (4,2),Position (5,1)]
Dir: Vertical
Valid neighbors: [Position (4,3)]
Dir: Vertical
Valid neighbors: [Position (3,3)]
Dir: Vertical
Valid neighbors: [Position (2,3)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (6,1)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (4,2),Position (5,1),Position (3,1)]
Dir: Vertical
Valid neighbors: [Position (4,3)]
Dir: Vertical
Valid neighbors: [Position (3,3)]
Dir: Vertical
Valid neighbors: [Position (2,3)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (6,1)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (6,1),Position (4,1)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (4,2),Position (3,1)]
Dir: Vertical
Valid neighbors: [Position (4,3)]
Dir: Vertical
Valid neighbors: [Position (3,3)]
Dir: Vertical
Valid neighbors: [Position (2,3)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: [Position (5,1)]
Dir: Vertical
Valid neighbors: [Position (4,1)]
Dir: Vertical
Valid neighbors: [Position (4,2),Position (3,1)]
Dir: Vertical
Valid neighbors: [Position (4,3)]
Dir: Vertical
Valid neighbors: [Position (3,3)]
Dir: Vertical
Valid neighbors: [Position (2,3)]
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: []
Dir: Vertical
Valid neighbors: []
Dir: Horizontal
  detects a road win through standing stones [✘]

Failures:

  test/TestMutableState.hs:201:16: 
  1) game end conditions detects a flat win for White
       expected: FlatWin White
        but got: Continue

  To rerun use: --match "/game end conditions/detects a flat win for White/"

  test/TestMutableState.hs:223:16: 
  2) game end conditions detects a flat win for Black
       expected: FlatWin Black
        but got: Continue

  To rerun use: --match "/game end conditions/detects a flat win for Black/"

  test/TestMutableState.hs:243:16: 
  3) game end conditions detects a draw due to reserves
       expected: Draw
        but got: Continue

  To rerun use: --match "/game end conditions/detects a draw due to reserves/"

  test/TestMutableState.hs:290:16: 
  4) game end conditions detects a road win through standing stones
       expected: Road White
        but got: Continue

  To rerun use: --match "/game end conditions/detects a road win through standing stones/"

Randomized with seed 1067389942

Finished in 0.0070 seconds
18 examples, 4 failures
